// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants    ProductVariant[]
  orderItems  OrderItem[]

  @@map("products")
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  name        String
  price       Int      // Price in cents
  originalPrice Int?   // Original price in cents (for discounts)
  sku         String?
  stock       Int      @default(0)
  weight      Int?     // Weight in grams
  calories    Int?
  protein     Float?   // Protein in grams
  carbs       Float?   // Carbs in grams
  fat         Float?   // Fat in grams
  fiber       Float?   // Fiber in grams
  sugar       Float?   // Sugar in grams
  sodium      Int?     // Sodium in mg
  ingredients String?
  allergens   String?
  storageInstructions String?
  published   Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@map("product_variants")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  customerName    String
  customerPhone   String
  customerEmail   String?
  customerAddress String?
  notes           String?
  status          String      @default("PENDING")
  totalAmount     Int         // Total in cents
  source          String?     // "website", "whatsapp", etc.
  whatsappSent    Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String
  productVariantId String
  quantity        Int
  unitPrice       Int      // Price per unit in cents
  totalPrice      Int      // Total price in cents
  createdAt       DateTime @default(now())

  order           Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product @relation(fields: [productId], references: [id])
  productVariant  ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  content   String
  rating    Int      @default(5)
  image     String?
  location  String?
  published Boolean  @default(false)
  featured  Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String?
  published Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Page {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  excerpt   String?
  published Boolean  @default(false)
  seoTitle  String?
  seoDescription String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pages")
}

model TeamMember {
  id           String   @id @default(cuid())
  name         String
  programStudi String
  instagramUrl String?
  photo        String?
  bio          String?
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("team_members")
}

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String
  status    String   @default("new") // new, read, replied
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

// Enums as constants (SQLite doesn't support enums)
// Role: "ADMIN" | "EDITOR"
// OrderStatus: "PENDING" | "CONFIRMED" | "PROCESSING" | "PACKED" | "SHIPPED" | "DELIVERED" | "CANCELLED" | "REFUNDED"
